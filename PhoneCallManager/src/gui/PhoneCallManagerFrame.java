package gui;

import core.Call;
import core.Country;
import core.Message;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;
import java.util.ResourceBundle;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.RowFilter;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import managers.*;

/**
 *
 * @author adam
 */
public class PhoneCallManagerFrame extends javax.swing.JFrame {

    private final CallTableModel callModel;
    private final MessageTableModel messageModel;
    private final MessageManager messageManager;
    private final CallManager callManager;
    private List<Call> callList;
    private List<Message> messageList;
    
   private static final ResourceBundle texts = ResourceBundle.getBundle("i18n/texts");
    /**
     * Creates new frame PhoneCallManager
     */
    public PhoneCallManagerFrame() {
        //log.info("Starting Ponecallmanager frame");
        initComponents();
        callModel = (CallTableModel) jTableCalls.getModel();
        messageModel = (MessageTableModel) jTableMessages.getModel();
        messageManager = LoadDataManager.getInstance().getMessageManager();
        callManager = LoadDataManager.getInstance().getCallManager();
        callList = callManager.getAll();
        System.out.println("Call list = " + callList);
        messageList = messageManager.getAll();
      //  TableRowSorter sorter = new TableRowSorter<CallTableModel>(callModel);
       // jTableCalls.setRowSorter(sorter);
       jTableCalls.setAutoCreateRowSorter(true);
       jTableMessages.setAutoCreateRowSorter(true);
     //  TableRowSorter<CallTableModel> sorter = jTableCalls.getRowSorter();

       
  JPanel pnl = new JPanel();
    pnl.add(new JLabel("Filter expression:"));
    final JTextField txtFE = new JTextField(25);
    pnl.add(txtFE);
    JButton btnSetFE = new JButton("Set Filter Expression");
    ActionListener al;
    al = new ActionListener() {
      
      @Override
      public void actionPerformed(ActionEvent e) {
        String expr = txtFE.getText();
     //   jTableCalls.getRowSorter().setRowFilter(RowFilter.regexFilter(expr));
        jTableCalls.getRowSorter().setSortKeys(null);
      }

    };
    btnSetFE.addActionListener(al);
    pnl.add(btnSetFE);
    
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableCalls = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableMessages = new javax.swing.JTable();
        jComboBoxFilterBy = new javax.swing.JComboBox<>();
        jTextFieldFilter = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(870, 500));

        jTabbedPane2.setMaximumSize(new java.awt.Dimension(850, 150));
        jTabbedPane2.setMinimumSize(new java.awt.Dimension(850, 150));
        jTabbedPane2.setName(""); // NOI18N

        jTableCalls.setModel(new CallTableModel(callModel));
        jTableCalls.setMaximumSize(new java.awt.Dimension(800, 150));
        jTableCalls.setMinimumSize(new java.awt.Dimension(800, 150));
        jScrollPane1.setViewportView(jTableCalls);

        jTabbedPane2.addTab("Calls", jScrollPane1);

        jTableMessages.setModel(new gui.MessageTableModel(messageModel));
        jTableMessages.setMaximumSize(new java.awt.Dimension(850, 150));
        jTableMessages.setMinimumSize(new java.awt.Dimension(850, 150));
        jScrollPane2.setViewportView(jTableMessages);

        jTabbedPane2.addTab("Messages", jScrollPane2);

        jComboBoxFilterBy.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nothing", "Date", "Callee", "Prefix", "Destination", "Direction", "Length", "Note" }));
        jComboBoxFilterBy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxFilterByActionPerformed(evt);
            }
        });

        jTextFieldFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldFilterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 850, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jComboBoxFilterBy, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jTextFieldFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(282, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(59, 59, 59)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxFilterBy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(436, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBoxFilterByActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxFilterByActionPerformed
        updateFilter();
    }//GEN-LAST:event_jComboBoxFilterByActionPerformed

    private void jTextFieldFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldFilterActionPerformed
        updateFilter();
    }//GEN-LAST:event_jTextFieldFilterActionPerformed

    protected void updateFilter() {
        Object selected = jComboBoxFilterBy.getSelectedItem();
        TableRowSorter<TableModel> sorterMessages = (TableRowSorter<TableModel>) jTableMessages.getRowSorter();
        TableRowSorter<TableModel> sorterCalls = (TableRowSorter<TableModel>) jTableCalls.getRowSorter();
        String text = jTextFieldFilter.getText();
        if ("Nothing".equals(selected)) {
            callList = CallManager.getAll();
            messageList = MessageManager.getAll();
        } else if ("Date".equals(selected)) {
              //callList = CallManager.getByDate(text);
              //messageList = MessageManager.getByDate(text);
               throw new UnsupportedOperationException("Implement CallManager.getByDate(String substringDate) method!");
            } else if ("Callee".equals(selected)) {
                callList = CallManager.getByCallee(text);
                messageList = MessageManager.getByCallee(text);
            } else if ("Prefix".equals(selected)) {
                throw new UnsupportedOperationException("Implement CallManager.getByPrefix(List<Country> CountryManager.getByPrefix(String substringPrefix)) method!");
                //callList = CallManager.getByPrefix(CountryManager.getByPrefix(text));
                //messageList = MessageManager.getByPrefix(CountryManager.getByPrefix(text));
            } else if ("Destination".equals(selected)) {
                throw new UnsupportedOperationException("Implement CallManager.getByDestination(List<Country> CountryManager.getByName(String substringDestination)) method!");
              //  callList = CallManager.getByDestination(CountryManager.getByName(text));
              //  messageList = MessageManager.getByDestination(CountryManager.getByName(text));              
            } else if ("Direction".equals(selected)) {
                throw new UnsupportedOperationException("Implement CallManager.getByDirection(String substringDirection) method!");
              //  callList = CallManager.getByDirection(String substringDirection); 
              //  MessageList = MessageManager.getByDirection(String substringDirection);                              
            } else if ("Length".equals(selected)) {
              //  throw new UnsupportedOperationException("Implement CallManager.getByLength(String substringLength) method!");
                callList = CallManager.getByLength(text); 
                messageList = MessageManager.getByLength(text);                               
            } else if ("Note".equals(selected)) {
                callList = CallManager.getByNote(text);
                messageList = MessageManager.getByNote(text);                 
            }
        
            System.out.println("text " + text);
        
        callModel.updateTable(callList, callModel);
        messageModel.updateTable(messageList, messageModel);
    }  
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PhoneCallManagerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PhoneCallManagerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PhoneCallManagerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PhoneCallManagerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PhoneCallManagerFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> jComboBoxFilterBy;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTable jTableCalls;
    private javax.swing.JTable jTableMessages;
    private javax.swing.JTextField jTextFieldFilter;
    // End of variables declaration//GEN-END:variables
}
